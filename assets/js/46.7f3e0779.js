(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{654:function(t,e,a){"use strict";a.r(e);var s=a(6),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编码"}},[t._v("#")]),t._v(" 编码")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/encoding#simple",target:"_blank",rel:"noopener noreferrer"}},[t._v("一个简单的消息"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/encoding#varints",target:"_blank",rel:"noopener noreferrer"}},[t._v("Base 128 变种"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/encoding#structure",target:"_blank",rel:"noopener noreferrer"}},[t._v("消息结构"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/encoding#types",target:"_blank",rel:"noopener noreferrer"}},[t._v("更多值类型"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/encoding#embedded",target:"_blank",rel:"noopener noreferrer"}},[t._v("嵌入式消息"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/encoding#optional",target:"_blank",rel:"noopener noreferrer"}},[t._v("可选元素和重复元素"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/encoding#order",target:"_blank",rel:"noopener noreferrer"}},[t._v("现场顺序"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/encoding#cheat-sheet",target:"_blank",rel:"noopener noreferrer"}},[t._v("精简参考卡"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("本文档描述了协议缓冲区消息的二进制有线格式。您无需了解这一点即可在应用程序中使用协议缓冲区，但了解不同的协议缓冲区格式如何影响编码消息的大小会非常有用。如果您已经了解这些概念但想要参考，请跳至"),a("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/encoding#cheat-sheet",target:"_blank",rel:"noopener noreferrer"}},[t._v("精简参考卡"),a("OutboundLink")],1),t._v("部分。")]),t._v(" "),a("h2",{attrs:{id:"一、一个简单的消息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、一个简单的消息"}},[t._v("#")]),t._v(" 一、一个简单的消息")]),t._v(" "),a("p",[t._v("假设您有以下非常简单的消息定义：")]),t._v(" "),a("div",{staticClass:"language-proto extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("message Test1 {\n  optional int32 a = 1;\n}\n")])])]),a("p",[t._v("在应用程序中，您创建一条"),a("code",[t._v("Test1")]),t._v("消息并将其设置"),a("code",[t._v("a")]),t._v("为 150。然后将消息序列化为输出流。如果您能够检查编码的消息，您会看到三个字节：")]),t._v(" "),a("div",{staticClass:"language-proto extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("08 96 01\n")])])]),a("p",[t._v("到目前为止，如此之小和数字——但这意味着什么？继续阅读...")]),t._v(" "),a("h2",{attrs:{id:"二、base-128-变种"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、base-128-变种"}},[t._v("#")]),t._v(" 二、Base 128 变种")]),t._v(" "),a("p",[t._v("要了解您的简单协议缓冲区编码，您首先需要了解"),a("em",[t._v("varints")]),t._v("。Varints 是一种使用一个或多个字节序列化整数的方法。较小的数字占用较少的字节数。")]),t._v(" "),a("p",[t._v("varint 中的每个字节，除了最后一个字节，都设置了"),a("em",[t._v("最高有效位")]),t._v("(msb)——这表明还有更多字节要到来。每个字节的低 7 位用于存储以 7 位为一组的数字的二进制补码表示，"),a("strong",[t._v("最低有效组在前")]),t._v("。")]),t._v(" "),a("p",[t._v("因此，例如，这里是数字 1——它是一个单字节，所以 msb 没有设置：")]),t._v(" "),a("div",{staticClass:"language-proto extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("0000 0001\n")])])]),a("p",[t._v("这里是 300——这有点复杂：")]),t._v(" "),a("div",{staticClass:"language-proto extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1010 1100 0000 0010\n")])])]),a("p",[t._v("你怎么知道这是300？首先，您从每个字节中删除 msb，因为这只是告诉我们是否已经到达数字的末尾（如您所见，它设置在第一个字节中，因为 varint 中有多个字节） ：")]),t._v(" "),a("div",{staticClass:"language-proto extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" 1010 1100 0000 0010\n→ 010 1100  000 0010\n")])])]),a("p",[t._v("您颠倒了两组 7 位，因为如您所记得的，varint 首先存储具有最低有效组的数字。然后将它们连接起来以获得最终值：")]),t._v(" "),a("div",{staticClass:"language-proto extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("000 0010  010 1100\n→  000 0010 ++ 010 1100\n→  100101100\n→  256 + 32 + 8 + 4 = 300\n")])])]),a("h2",{attrs:{id:"三、消息结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、消息结构"}},[t._v("#")]),t._v(" 三、消息结构")]),t._v(" "),a("p",[t._v("如您所知，协议缓冲区消息是一系列键值对。消息的二进制版本只是使用字段的编号作为键——每个字段的名称和声明的类型只能在解码端通过引用消息类型的定义（即"),a("code",[t._v(".proto")]),t._v("文件）来确定。")]),t._v(" "),a("p",[t._v("当消息被编码时，键和值被连接成一个字节流。当消息被解码时，解析器需要能够跳过它无法识别的字段。这样，可以将新字段添加到消息中，而不会破坏不了解它们的旧程序。为此，有线格式消息中每一对的“键”实际上是两个值——"),a("code",[t._v(".proto")]),t._v("文件中的字段编号，加上提供足够信息来查找以下值的长度的*有线类型。*在大多数语言实现中，这个键被称为标签。")]),t._v(" "),a("p",[t._v("可用的电线类型如下：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("意义")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("用于")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("瓦林特")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("int32，int64，uint32，uint64，sint32，sint64，布尔，枚举")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("64 位")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("固定64，固定64，双")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("长度分隔")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("字符串、字节、嵌入消息、打包的重复字段")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("开始组")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("组（已弃用）")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("结束组")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("组（已弃用）")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("32 位")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("固定32，固定32，浮动")])])])]),t._v(" "),a("p",[t._v("流式消息中的每个键都是带有值的 varint "),a("code",[t._v("(field_number << 3) | wire_type")]),t._v("- 换句话说，数字的最后三位存储线路类型。")]),t._v(" "),a("p",[t._v("现在让我们再次看一下我们的简单示例。您现在知道流中的第一个数字始终是 varint 键，这里是 08，或者（删除 msb）：")]),t._v(" "),a("div",{staticClass:"language-proto extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("000 1000\n")])])]),a("p",[t._v("您取最后三位来获取线路类型 (0)，然后右移三位以获取字段编号 (1)。所以你现在知道字段号是 1，下面的值是一个 varint。使用上一节中的 varint 解码知识，您可以看到接下来的两个字节存储值 150。")]),t._v(" "),a("div",{staticClass:"language-proto extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("96 01 = 1001 0110  0000 0001\n       → 000 0001  ++  001 0110 (drop the msb and reverse the groups of 7 bits)\n       → 10010110\n       → 128 + 16 + 4 + 2 = 150\n")])])]),a("h2",{attrs:{id:"四、更多值类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、更多值类型"}},[t._v("#")]),t._v(" 四、更多值类型")]),t._v(" "),a("h3",{attrs:{id:"_1、有符号整数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、有符号整数"}},[t._v("#")]),t._v(" 1、有符号整数")]),t._v(" "),a("p",[t._v("正如您在上一节中看到的，与线类型 0 关联的所有协议缓冲区类型都被编码为 varint。但是，在编码负数时，带符号的 int 类型（ "),a("code",[t._v("sint32")]),t._v("and "),a("code",[t._v("sint64")]),t._v("）和“标准” int 类型（"),a("code",[t._v("int32")]),t._v("and ）之间存在重要区别。"),a("code",[t._v("int64")]),t._v("如果使用"),a("code",[t._v("int32")]),t._v("or"),a("code",[t._v("int64")]),t._v("作为负数的类型，则生成的 varint"),a("em",[t._v("始终为 10 个字节长")]),t._v("——实际上，它被视为一个非常大的无符号整数。如果您使用其中一种有符号类型，则生成的 varint 将使用 ZigZag 编码，这种编码效率更高。")]),t._v(" "),a("p",[t._v("ZigZag 编码将有符号整数映射到无符号整数，因此具有较小"),a("em",[t._v("绝对值")]),t._v("（例如，-1）的数字也具有较小的 varint 编码值。它以一种通过正整数和负整数来回“曲折”的方式来执行此操作，因此 -1 被编码为 1，1 被编码为 2，-2 被编码为 3，依此类推，就像你可以在下表中看到：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("签名原件")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("编码为")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("-1")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("1")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("3")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("2147483647")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("4294967294")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("-2147483648")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("4294967295")])])])]),t._v(" "),a("p",[t._v("换句话说，每个值"),a("code",[t._v("n")]),t._v("都使用编码")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("(n << 1) ^ (n >> 31)\n")])])]),a("p",[t._v("对于"),a("code",[t._v("sint32")]),t._v("s，或")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("(n << 1) ^ (n >> 63)\n")])])]),a("p",[t._v("对于 64 位版本。")]),t._v(" "),a("p",[t._v("请注意，第二个移位 -"),a("code",[t._v("(n >> 31)")]),t._v("部分 - 是算术移位。因此，换句话说，移位的结果要么是一个全为零的数字（如果"),a("code",[t._v("n")]),t._v("是正数），要么是全为一的数字（如果"),a("code",[t._v("n")]),t._v("是负数）。")]),t._v(" "),a("p",[t._v("当"),a("code",[t._v("sint32")]),t._v("or"),a("code",[t._v("sint64")]),t._v("被解析时，它的值被解码回原始的签名版本。")]),t._v(" "),a("h3",{attrs:{id:"_2、非变数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、非变数"}},[t._v("#")]),t._v(" 2、非变数")]),t._v(" "),a("p",[t._v("非 varint 数值类型很简单——"),a("code",[t._v("double")]),t._v("并且"),a("code",[t._v("fixed64")]),t._v("具有连线类型 1，它告诉解析器期待一个固定的 64 位数据块；类似地"),a("code",[t._v("float")]),t._v("并且"),a("code",[t._v("fixed32")]),t._v("具有线类型 5，它告诉它期望 32 位。在这两种情况下，值都以 little-endian 字节顺序存储。")]),t._v(" "),a("h3",{attrs:{id:"_3、字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、字符串"}},[t._v("#")]),t._v(" 3、字符串")]),t._v(" "),a("p",[t._v("线路类型 2（长度分隔）表示该值是一个 varint 编码长度，后跟指定的数据字节数。")]),t._v(" "),a("div",{staticClass:"language-proto extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("message Test2 {\n  optional string b = 2;\n}\n")])])]),a("p",[t._v("将 b 的值设置为“testing”可以为您提供：")]),t._v(" "),a("div",{staticClass:"language-proto extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("12 07 [74 65 73 74 69 6e 67]\n")])])]),a("p",[t._v("[括号]中的字节是“测试”的UTF8。这里的关键是 0x12。它被解析：")]),t._v(" "),a("div",{staticClass:"language-proto extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("0x12\n→ 0001 0010  (binary representation)\n→ 00010 010  (regroup bits)\n→ field_number = 2, wire_type = 2\n")])])]),a("p",[t._v("值中的长度 varint 为 7，其后的七个字节是字符串。")]),t._v(" "),a("h2",{attrs:{id:"五、嵌入式消息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、嵌入式消息"}},[t._v("#")]),t._v(" 五、嵌入式消息")]),t._v(" "),a("p",[t._v("这是一个包含我们示例类型 Test1 的嵌入式消息的消息定义：")]),t._v(" "),a("div",{staticClass:"language-proto extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("message Test3 {\n  optional Test1 c = 3;\n}\n")])])]),a("p",[t._v("这是编码版本，Test1 的"),a("code",[t._v("a")]),t._v("字段再次设置为 150：")]),t._v(" "),a("div",{staticClass:"language-proto extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" 1a 03 08 96 01\n")])])]),a("p",[t._v("如您所见，最后三个字节与我们的第一个示例 ( ) 完全相同"),a("code",[t._v("08 96 01")]),t._v("，并且它们前面是数字 3 - 嵌入消息的处理方式与字符串完全相同（wire type = 2）。")]),t._v(" "),a("h2",{attrs:{id:"六、可选元素和重复元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、可选元素和重复元素"}},[t._v("#")]),t._v(" 六、可选元素和重复元素")]),t._v(" "),a("p",[t._v("如果 proto2 消息定义包含"),a("code",[t._v("repeated")]),t._v("元素（没有"),a("code",[t._v("[packed=true]")]),t._v("选项），则编码消息具有零个或多个具有相同字段编号的键值对。这些重复值不必连续出现；它们可能与其他字段交错。解析时会保留元素相对于彼此的顺序，尽管相对于其他字段的顺序会丢失。在 proto3 中，重复字段使用"),a("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/encoding#packed",target:"_blank",rel:"noopener noreferrer"}},[t._v("打包编码"),a("OutboundLink")],1),t._v("，您可以在下面阅读。")]),t._v(" "),a("p",[t._v("对于 proto3 中的任何非重复字段或"),a("code",[t._v("optional")]),t._v("proto2 中的字段，编码的消息可能具有也可能没有具有该字段编号的键值对。")]),t._v(" "),a("p",[t._v("通常，编码消息永远不会有多个非重复字段的实例。但是，解析器应该处理它们所做的情况。对于数字类型和字符串，如果同一个字段出现多次，解析器接受它看到的*最后一个值。*对于嵌入的消息字段，解析器合并同一字段的多个实例，就像使用"),a("code",[t._v("Message::MergeFrom")]),t._v("方法一样——即后一个实例中的所有奇异标量字段替换前者，合并单个嵌入消息，并连接重复的字段。这些规则的效果是，解析两个编码消息的连接会产生完全相同的结果，就像您分别解析两个消息并合并结果对象一样。也就是说，这个：")]),t._v(" "),a("div",{staticClass:"language-proto extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("MyMessage message;\nmessage.ParseFromString(str1 + str2);\n")])])]),a("p",[t._v("相当于：")]),t._v(" "),a("div",{staticClass:"language-proto extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("MyMessage message, message2;\nmessage.ParseFromString(str1);\nmessage2.ParseFromString(str2);\nmessage.MergeFrom(message2);\n")])])]),a("p",[t._v("此属性有时很有用，因为它允许您合并两条消息，即使您不知道它们的类型。")]),t._v(" "),a("h3",{attrs:{id:"打包的重复字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#打包的重复字段"}},[t._v("#")]),t._v(" 打包的重复字段")]),t._v(" "),a("p",[t._v("版本 2.1.0 引入了打包的重复字段，在 proto2 中被声明为重复字段，但带有特殊"),a("code",[t._v("[packed=true]")]),t._v("选项。在 proto3 中，默认情况下会打包标量数字类型的重复字段。这些功能类似于重复字段，但编码不同。包含零个元素的压缩重复字段不会出现在编码消息中。否则，该字段的所有元素都将被打包到一个键值对中，其中有线类型为 2（长度分隔）。每个元素的编码方式与正常情况相同，只是前面没有键。")]),t._v(" "),a("p",[t._v("例如，假设您有消息类型：")]),t._v(" "),a("div",{staticClass:"language-proto extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("message Test4 {\n  repeated int32 d = 4 [packed=true];\n}\n")])])]),a("p",[t._v("现在假设您构造 a "),a("code",[t._v("Test4")]),t._v("，为重复字段提供值 3、270 和 86942 "),a("code",[t._v("d")]),t._v("。然后，编码形式将是：")]),t._v(" "),a("div",{staticClass:"language-proto extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("22        // key (field number 4, wire type 2)\n06        // payload size (6 bytes)\n03        // first element (varint 3)\n8E 02     // second element (varint 270)\n9E A7 05  // third element (varint 86942)\n")])])]),a("p",[t._v("只有原始数字类型（使用 varint、32 位或 64 位连线类型的类型）的重复字段才能被声明为“打包”。")]),t._v(" "),a("p",[t._v("请注意，尽管通常没有理由为打包的重复字段编码多个键值对，但解析器必须准备好接受多个键值对。在这种情况下，应连接有效载荷。每对必须包含整数个元素。")]),t._v(" "),a("p",[t._v("协议缓冲区解析器必须能够解析被编译的重复字段，就"),a("code",[t._v("packed")]),t._v("好像它们没有被打包一样，反之亦然。这允许"),a("code",[t._v("[packed=true]")]),t._v("以向前和向后兼容的方式添加到现有字段。")]),t._v(" "),a("h2",{attrs:{id:"七、field-order"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、field-order"}},[t._v("#")]),t._v(" 七、Field Order")]),t._v(" "),a("p",[t._v("字段编号可以在"),a("code",[t._v(".proto")]),t._v("文件中以任何顺序使用。选择的顺序对消息的序列化方式没有影响。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/proto#updating",target:"_blank",rel:"noopener noreferrer"}},[t._v("当消息被序列化时，其已知或未知字段"),a("OutboundLink")],1),t._v("的写入方式没有保证的顺序。序列化顺序是一个实现细节，任何特定实现的细节都可能在未来发生变化。因此，协议缓冲区解析器必须能够以任何顺序解析字段。")]),t._v(" "),a("h3",{attrs:{id:"implication"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implication"}},[t._v("#")]),t._v(" Implication")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("不要假设序列化消息的字节输出是稳定的。对于具有表示其他序列化协议缓冲区消息的传递字节字段的消息尤其如此。")])]),t._v(" "),a("li",[a("p",[t._v("默认情况下，在同一协议缓冲区消息实例上重复调用序列化方法可能不会产生相同的字节输出。也就是说，默认序列化不是确定性的。")]),t._v(" "),a("ul",[a("li",[t._v("确定性序列化仅保证特定二进制文件的相同字节输出。字节输出可能会在不同版本的二进制文件中发生变化。")])])]),t._v(" "),a("li",[a("p",[t._v("对于协议缓冲区消息实例，以下检查可能会失败")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("foo\n")])])]),a("p",[t._v("：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("foo.SerializeAsString() == foo.SerializeAsString()")])]),t._v(" "),a("li",[a("code",[t._v("Hash(foo.SerializeAsString()) == Hash(foo.SerializeAsString())")])]),t._v(" "),a("li",[a("code",[t._v("CRC(foo.SerializeAsString()) == CRC(foo.SerializeAsString())")])]),t._v(" "),a("li",[a("code",[t._v("FingerPrint(foo.SerializeAsString()) == FingerPrint(foo.SerializeAsString())")])])])]),t._v(" "),a("li",[a("p",[t._v("以下是一些逻辑上等效的协议缓冲区消息的示例场景，")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("foo\n")])])]),a("p",[t._v("并且")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("bar\n")])])]),a("p",[t._v("可能会序列化为不同的字节输出：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("bar")]),t._v("由将某些字段视为未知的旧服务器序列化。")]),t._v(" "),a("li",[a("code",[t._v("bar")]),t._v("由以不同编程语言实现并以不同顺序序列化字段的服务器进行序列化。")]),t._v(" "),a("li",[a("code",[t._v("bar")]),t._v("具有以非确定性方式序列化的字段。")]),t._v(" "),a("li",[a("code",[t._v("bar")]),t._v("有一个字段存储协议缓冲区消息的序列化字节输出，该消息以不同的方式序列化。")]),t._v(" "),a("li",[a("code",[t._v("bar")]),t._v("由一个新服务器序列化，该服务器由于实现更改而以不同的顺序序列化字段。")]),t._v(" "),a("li",[a("code",[t._v("foo")]),t._v("并且"),a("code",[t._v("bar")]),t._v("是相同的单个消息以不同顺序的串联。")])])])]),t._v(" "),a("h2",{attrs:{id:"八、精简参考卡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八、精简参考卡"}},[t._v("#")]),t._v(" 八、精简参考卡")]),t._v(" "),a("p",[t._v("以下以易于参考的格式提供了线路格式中最突出的部分。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("message   := (tag value)*     You can think of this as “key value”\n\ntag       := (field << 3) BIT_OR wire_type, encoded as varint\nvalue     := (varint|zigzag) for wire_type==0 |\n             fixed32bit      for wire_type==5 |\n             fixed64bit      for wire_type==1 |\n             delimited       for wire_type==2 |\n             group_start     for wire_type==3 | This is like “open parenthesis”\n             group_end       for wire_type==4   This is like “close parenthesis”\n\nvarint       := int32 | int64 | uint32 | uint64 | bool | enum, encoded as\n                varints\nzigzag       := sint32 | sint64, encoded as zig-zag varints\nfixed32bit   := sfixed32 | fixed32 | float, encoded as 4-byte little-endian;\n                memcpy of the equivalent C types (u?int32_t, float)\nfixed64bit   := sfixed64 | fixed64 | double, encoded as 8-byte little-endian;\n                memcpy of the equivalent C types (u?int64_t, double)\n\ndelimited := size (message | string | bytes | packed), size encoded as varint\nmessage   := valid protobuf sub-message\nstring    := valid UTF-8 string (often simply ASCII); max 2GB of bytes\nbytes     := any sequence of 8-bit bytes; max 2GB\npacked    := varint* | fixed32bit* | fixed64bit*,\n             consecutive values of the type described in the protocol definition\n\nvarint encoding: sets MSB of 8-bit byte to indicate “no more bytes”\nzigzag encoding: sint32 and sint64 types use zigzag encoding.\n")])])]),a("h3",{attrs:{id:"钥匙"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#钥匙"}},[t._v("#")]),t._v(" 钥匙")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("message := (tag value)*")])]),t._v(" "),a("p",[t._v("消息被编码为零个或多个标签和值对的序列。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("tag := (field << 3) BIT_OR wire_type, encoded as varint")])]),t._v(" "),a("p",[t._v("标记是"),a("code",[t._v("wire_type")]),t._v("存储在最低有效三位中的 a 和"),a("code",[t._v(".proto")]),t._v("文件中定义的字段编号的组合。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("value := varint for wire_type==0, fixed32 for wire_type==5, ...")])]),t._v(" "),a("p",[a("code",[t._v("wire_type")]),t._v("根据标签中的指定，值的存储方式不同。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("varint := int32 | int64 | uint32 | uint64 | sint32 | sint64 | bool | enum")])]),t._v(" "),a("p",[t._v("您可以使用 varint 存储任何列出的数据类型。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("fixed32 := int32 | uint32 | float")])]),t._v(" "),a("p",[t._v("您可以使用 fixed32 来存储任何列出的数据类型。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("fixed64 := int64 | uint64 | double")])]),t._v(" "),a("p",[t._v("您可以使用 fixed64 存储任何列出的数据类型。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("delimited := size (message | string | bytes | packed)")])]),t._v(" "),a("p",[t._v("分隔值存储为大小，编码为 varint，然后是列出的数据类型之一。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("message := valid protobuf sub-message")])]),t._v(" "),a("p",[t._v("消息数据类型存储一条消息，然后可以将其存储在另一条消息中。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("string := valid UTF-8 string, or sequence of 7-bit ASCII bytes; max 2GB")])]),t._v(" "),a("p",[t._v("如前所述，字符串必须使用 UTF-8 字符编码。一个字符串不能超过 2GB。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("bytes := any sequence of 8-bit bytes; max 2GB")])]),t._v(" "),a("p",[t._v("如上所述，字节可以存储自定义数据类型，最大为 2GB。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("packed := varint* | fixed32* | fixed64*")])]),t._v(" "),a("p",[a("code",[t._v("packed")]),t._v("当您存储协议定义中描述的类型的连续值时，请使用数据类型。标记在第一个之后的值被丢弃，这提高了协议缓冲区的效率。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("varint encoding: uses MSB of 8-bit byte to indicate “no more bytes”")])]),t._v(" "),a("p",[t._v("有关如何序列化 varint 的更多信息，请参阅前面的部分"),a("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/encoding#varints",target:"_blank",rel:"noopener noreferrer"}},[t._v("Base 128 Varints 。"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[a("code",[t._v("zigzag encoding: sint32 and sint64 types use zigzag encoding")])]),t._v(" "),a("p",[a("code",[t._v("sint32")]),t._v("和类型使用 zigzag 编码，以便用小序列"),a("code",[t._v("sint64")]),t._v("表示小的负数。"),a("code",[t._v("varint")]),t._v("有关 zigzag 编码的更多信息，请参阅前面的有"),a("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/encoding#signed-ints",target:"_blank",rel:"noopener noreferrer"}},[t._v("符号整数"),a("OutboundLink")],1),t._v("部分。")])])]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ul",[a("li",[t._v("https://developers.google.com/protocol-buffers/docs/encoding")])])])}),[],!1,null,null,null);e.default=r.exports}}]);
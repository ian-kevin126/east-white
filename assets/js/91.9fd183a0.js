(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{699:function(t,s,a){"use strict";a.r(s);var n=a(6),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"包的基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包的基本概念"}},[t._v("#")]),t._v(" 包的基本概念")]),t._v(" "),a("p",[t._v("Go 语言是使用包来组织源代码的，包（package）是多个 Go 源码的集合，是一种高级的代码复用方案。Go 语言中为我们提供了很多内置包，如 fmt、os、io 等。")]),t._v(" "),a("p",[t._v("任何源代码文件必须属于某个包，同时源码文件的第一行有效代码必须是"),a("code",[t._v("package pacakgeName")]),t._v("语句，通过该语句声明自己所在的包。")]),t._v(" "),a("h2",{attrs:{id:"一、包的基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、包的基本概念"}},[t._v("#")]),t._v(" 一、包的基本概念")]),t._v(" "),a("p",[t._v("Go语言的包借助了目录树的组织形式，一般包的名称就是其源文件所在目录的名称，虽然Go语言没有强制要求包名必须和其所在的目录名同名，但还是建议包名和所在目录同名，这样结构更清晰。")]),t._v(" "),a("p",[t._v("包可以定义在很深的目录中，包名的定义是不包括目录路径的，但是包在引用时一般使用全路径引用。")]),t._v(" "),a("p",[t._v("包的习惯用法：")]),t._v(" "),a("ul",[a("li",[t._v("包名一般是小写的，使用一个简短且有意义的名称。")]),t._v(" "),a("li",[t._v("包名一般要和所在的目录同名，也可以不同，包名中不能包含"),a("code",[t._v("-")]),t._v("等特殊符号。")]),t._v(" "),a("li",[t._v("包名为 main 的包为应用程序的入口包，编译不包含 main 包的源码文件时不会得到可执行文件。")]),t._v(" "),a("li",[t._v("一个文件夹下的所有源码文件只能属于同一个包，同样属于同一个包的源码文件不能放在多个文件夹下。")])]),t._v(" "),a("h3",{attrs:{id:"_1、包介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、包介绍"}},[t._v("#")]),t._v(" 1、包介绍")]),t._v(" "),a("p",[t._v("Go语言中支持模块化的开发理念，在Go语言中使用"),a("code",[t._v("包（package）")]),t._v("来支持代码模块化和代码复用。一个包是由一个或多个Go源码文件（.go结尾的文件）组成，是一种高级的代码复用方案，Go语言为我们提供了很多内置包，如"),a("code",[t._v("fmt")]),t._v("、"),a("code",[t._v("os")]),t._v("、"),a("code",[t._v("io")]),t._v("等。")]),t._v(" "),a("p",[t._v("例如，在之前的章节中我们频繁使用了"),a("code",[t._v("fmt")]),t._v("这个内置包。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上面短短的几行代码就涉及到了如何定义包以及如何引入其它包两个内容，接下来我们依次介绍一下它们。")]),t._v(" "),a("h3",{attrs:{id:"_2、定义包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、定义包"}},[t._v("#")]),t._v(" 2、定义包")]),t._v(" "),a("p",[t._v("我们可以根据自己的需要创建自定义包。一个包可以简单理解为一个存放"),a("code",[t._v(".go")]),t._v("文件的文件夹。该文件夹下面的所有"),a("code",[t._v(".go")]),t._v("文件都要在非注释的第一行添加如下声明，声明该文件归属的包。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" packagename\n")])])]),a("p",[t._v("其中：")]),t._v(" "),a("ul",[a("li",[t._v("package：声明包的关键字")]),t._v(" "),a("li",[t._v("packagename：包名，可以不与文件夹的名称一致，不能包含 "),a("code",[t._v("-")]),t._v(" 符号，最好与其实现的功能相对应。")])]),t._v(" "),a("p",[t._v("另外需要注意一个文件夹下面直接包含的文件只能归属一个包，同一个包的文件不能在多个文件夹下。包名为"),a("code",[t._v("main")]),t._v("的包是应用程序的入口包，这种包编译后会得到一个可执行文件，而编译不包含"),a("code",[t._v("main")]),t._v("包的源代码则不会得到可执行文件。")]),t._v(" "),a("h3",{attrs:{id:"_3、标识符可见性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、标识符可见性"}},[t._v("#")]),t._v(" 3、标识符可见性")]),t._v(" "),a("p",[t._v("在同一个包内部声明的标识符都位于同一个命名空间下，在不同的包内部声明的标识符就属于不同的命名空间。想要在包的外部使用包内部的标识符就需要添加包名前缀，例如"),a("code",[t._v('fmt.Println("Hello world!"')]),t._v("·，就是指调用"),a("code",[t._v("fmt")]),t._v("包中的"),a("code",[t._v("Println")]),t._v("函数。")]),t._v(" "),a("p",[t._v("如果想让一个包中的标识符（如变量、常量、类型、函数等）能被外部的包使用，那么标识符必须是对外可见的（public）。在Go语言中是通过标识符的首字母大/小写来控制标识符的对外可见（public）/不可见（private）的。在一个包内部只有首字母大写的标识符才是对外可见的。")]),t._v(" "),a("p",[t._v("例如我们定义一个名为"),a("code",[t._v("demo")]),t._v("的包，在其中定义了若干标识符。在另外一个包中并不是所有的标识符都能通过"),a("code",[t._v("demo.")]),t._v("前缀访问到，因为只有那些首字母是大写的标识符才是对外可见的。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" demo\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 包级别标识符的可见性")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// num 定义一个全局整型变量")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 首字母小写，对外不可见(只能在当前包内使用)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Mode 定义一个常量")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 首字母大写，对外可见(可在其它包中使用)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Mode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// person 定义一个代表人的结构体")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 首字母小写，对外不可见(只能在当前包内使用)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tname "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n\tAge  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Add 返回两个整数和的函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 首字母大写，对外可见(可在其它包中使用)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sayHi 打招呼的函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 首字母小写，对外不可见(只能在当前包内使用)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHi")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"七米"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数局部变量，只能在当前函数内使用")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("同样的规则也适用于结构体，结构体中可导出字段的字段名称必须首字母大写。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Student "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tName  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可在包外访问的方法")]),t._v("\n\tclass "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 仅限包内访问的字段")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("包可以定义在很深的目录中，包名的定义是不包括目录路径的，但是包在引用时一般使用全路径引用。比如在"),a("code",[t._v("GOPATH/src/a/b/")]),t._v("下定义一个包 c。在包 c 的源码中只需声明为"),a("code",[t._v("package c")]),t._v("，而不是声明为"),a("code",[t._v("package a/b/c")]),t._v("，但是在导入 c 包时，需要带上路径，例如"),a("code",[t._v('import "a/b/c"')]),t._v("。")]),t._v(" "),a("p",[t._v("包的习惯用法：")]),t._v(" "),a("ul",[a("li",[t._v("包名一般是小写的，使用一个简短且有意义的名称。")]),t._v(" "),a("li",[t._v("包名一般要和所在的目录同名，也可以不同，包名中不能包含"),a("code",[t._v("-")]),t._v("等特殊符号。")]),t._v(" "),a("li",[t._v("包一般使用域名作为目录名称，这样能保证包名的唯一性，比如 GitHub 项目的包一般会放到"),a("code",[t._v("GOPATH/src/github.com/userName/projectName")]),t._v("目录下。")]),t._v(" "),a("li",[t._v("包名为 main 的包为应用程序的入口包，编译不包含 main 包的源码文件时不会得到可执行文件。")]),t._v(" "),a("li",[t._v("一个文件夹下的所有源码文件只能属于同一个包，同样属于同一个包的源码文件不能放在多个文件夹下。")])]),t._v(" "),a("h2",{attrs:{id:"二、包的导入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、包的导入"}},[t._v("#")]),t._v(" 二、包的导入")]),t._v(" "),a("p",[t._v("要在代码中引用其他包的内容，需要使用 import 关键字导入使用的包。具体语法如下：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"包的路径"')]),t._v("\n")])])]),a("p",[t._v("注意事项：")]),t._v(" "),a("ul",[a("li",[t._v("import 导入语句通常放在源码文件开头包声明语句的下面；")]),t._v(" "),a("li",[t._v("导入的包名需要使用双引号包裹起来；")]),t._v(" "),a("li",[t._v("包名是从"),a("code",[t._v("GOPATH/src/")]),t._v("后开始计算的，使用"),a("code",[t._v("/")]),t._v("进行路径分隔。")])]),t._v(" "),a("p",[t._v("包的导入有两种写法，分别是单行导入和多行导入。")]),t._v(" "),a("h3",{attrs:{id:"_1、单行导入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、单行导入"}},[t._v("#")]),t._v(" 1、单行导入")]),t._v(" "),a("p",[t._v("单行导入的格式如下：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"包 1 的路径"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"包 2 的路径"')]),t._v("\n")])])]),a("h3",{attrs:{id:"_2、多行导入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、多行导入"}},[t._v("#")]),t._v(" 2、多行导入")]),t._v(" "),a("p",[t._v("多行导入的格式如下：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"包 1 的路径"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"包 2 的路径"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"三、包的导入路径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、包的导入路径"}},[t._v("#")]),t._v(" 三、包的导入路径")]),t._v(" "),a("p",[t._v("包的引用路径有两种写法，分别是全路径导入和相对路径导入。")]),t._v(" "),a("h3",{attrs:{id:"_1、全路径导入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、全路径导入"}},[t._v("#")]),t._v(" 1、全路径导入")]),t._v(" "),a("p",[t._v("包的绝对路径就是"),a("code",[t._v("GOROOT/src/")]),t._v("或"),a("code",[t._v("GOPATH/src/")]),t._v("后面包的存放路径，如下所示：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lab/test"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"database/sql/driver"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"database/sql"')]),t._v("\n")])])]),a("p",[t._v("上面代码的含义如下：")]),t._v(" "),a("ul",[a("li",[t._v("test 包是自定义的包，其源码位于"),a("code",[t._v("GOPATH/src/lab/test")]),t._v("目录下；")]),t._v(" "),a("li",[t._v("driver 包的源码位于"),a("code",[t._v("GOROOT/src/database/sql/driver")]),t._v("目录下；")]),t._v(" "),a("li",[t._v("sql 包的源码位于"),a("code",[t._v("GOROOT/src/database/sql")]),t._v("目录下。")])]),t._v(" "),a("h3",{attrs:{id:"_2、相对路径导入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、相对路径导入"}},[t._v("#")]),t._v(" 2、相对路径导入")]),t._v(" "),a("p",[t._v("相对路径只能用于导入"),a("code",[t._v("GOPATH")]),t._v("下的包，标准包的导入只能使用全路径导入。")]),t._v(" "),a("p",[t._v("例如包 a 的所在路径是"),a("code",[t._v("GOPATH/src/lab/a")]),t._v("，包 b 的所在路径为"),a("code",[t._v("GOPATH/src/lab/b")]),t._v("，如果在包 b 中导入包 a ，则可以使用相对路径导入方式。示例如下：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 相对路径导入")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"../a"')]),t._v("\n")])])]),a("p",[t._v("当然了，也可以使用上面的全路径导入，如下所示：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 全路径导入")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lab/a"')]),t._v("\n")])])]),a("h3",{attrs:{id:"_3、包的引用格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、包的引用格式"}},[t._v("#")]),t._v(" 3、包的引用格式")]),t._v(" "),a("p",[t._v("包的引用有四种格式，下面以 fmt 包为例来分别演示一下这四种格式。")]),t._v(" "),a("h4",{attrs:{id:"_3-1-标准引用格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-标准引用格式"}},[t._v("#")]),t._v(" 3.1 标准引用格式")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n")])])]),a("p",[t._v("此时可以用"),a("code",[t._v("fmt.")]),t._v("作为前缀来使用 fmt 包中的方法，这是常用的一种方式。")]),t._v(" "),a("p",[t._v("示例代码如下：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"_3-2-自定义别名引用格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-自定义别名引用格式"}},[t._v("#")]),t._v(" 3.2 自定义别名引用格式")]),t._v(" "),a("p",[t._v("在导入包的时候，我们还可以为导入的包设置别名，如下所示：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" F "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n")])])]),a("p",[t._v("其中 F 就是 fmt 包的别名，使用时我们可以使用"),a("code",[t._v("F.")]),t._v("来代替标准引用格式的"),a("code",[t._v("fmt.")]),t._v("来作为前缀使用 fmt 包中的方法。")]),t._v(" "),a("p",[t._v("示例代码如下：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" F "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  F"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"_3-3-省略引用格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-省略引用格式"}},[t._v("#")]),t._v(" 3.3 省略引用格式")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n")])])]),a("p",[t._v("这种格式相当于把 fmt 包直接合并到当前程序中，在使用 fmt 包内的方法是可以不用加前缀"),a("code",[t._v("fmt.")]),t._v("，直接引用。")]),t._v(" "),a("p",[t._v("示例代码如下：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//不需要加前缀 fmt.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"_3-4-匿名引用格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-匿名引用格式"}},[t._v("#")]),t._v(" 3.4 匿名引用格式")]),t._v(" "),a("p",[t._v("在引用某个包时，如果只是希望执行包初始化的 init 函数，而不使用包内部的数据时，可以使用匿名引用格式，如下所示：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n")])])]),a("p",[t._v("匿名导入的包与其他方式导入的包一样都会被编译到可执行文件中。")]),t._v(" "),a("p",[t._v("使用标准格式引用包，但是代码中却没有使用包，编译器会报错。如果包中有 init 初始化函数，则通过"),a("code",[t._v('import _ "包的路径"')]),t._v("这种方式引用包，仅执行包的初始化函数，即使包没有 init 初始化函数，也不会引发编译器报错。")]),t._v(" "),a("p",[t._v("示例代码如下：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"database/sql"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("注意：")]),t._v(" "),a("ul",[a("li",[t._v("一个包可以有多个 init 函数，包加载时会执行全部的 init 函数，但并不能保证执行顺序，所以不建议在一个包中放入多个 init 函数，将需要初始化的逻辑放到一个 init 函数里面。")]),t._v(" "),a("li",[t._v("包不能出现环形引用的情况，比如包 a 引用了包 b，包 b 引用了包 c，如果包 c 又引用了包 a，则编译不能通过。")]),t._v(" "),a("li",[t._v("包的重复引用是允许的，比如包 a 引用了包 b 和包 c，包 b 和包 c 都引用了包 d。这种场景相当于重复引用了 d，这种情况是允许的，并且 Go 编译器保证包 d 的 init 函数只会执行一次。")])]),t._v(" "),a("h2",{attrs:{id:"四、包加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、包加载"}},[t._v("#")]),t._v(" 四、包加载")]),t._v(" "),a("h3",{attrs:{id:"_1、包的引入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、包的引入"}},[t._v("#")]),t._v(" 1、包的引入")]),t._v(" "),a("p",[t._v("要在当前包中使用另外一个包的内容就需要使用"),a("code",[t._v("import")]),t._v("关键字引入这个包，并且import语句通常放在文件的开头，"),a("code",[t._v("package")]),t._v("声明语句的下方。完整的引入声明语句格式如下:")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" importname "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"path/to/package"')]),t._v("\n")])])]),a("p",[t._v("其中：")]),t._v(" "),a("ul",[a("li",[t._v("importname：引入的包名，通常都省略。默认值为引入包的包名。")]),t._v(" "),a("li",[t._v("path/to/package：引入包的路径名称，必须使用双引号包裹起来。")]),t._v(" "),a("li",[t._v("Go语言中禁止循环导入包。")])]),t._v(" "),a("p",[t._v("一个Go源码文件中可以同时引入多个包，例如：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"net/http"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"os"')]),t._v("\n")])])]),a("p",[t._v("当然可以使用批量引入的方式。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n  \t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"net/http"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"os"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("当引入的多个包中存在相同的包名或者想自行为某个引入的包设置一个新包名时，都需要通过"),a("code",[t._v("importname")]),t._v("指定一个在当前文件中使用的新包名。例如，在引入"),a("code",[t._v("fmt")]),t._v("包时为其指定一个新包名"),a("code",[t._v("f")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" f "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n")])])]),a("p",[t._v("这样在当前这个文件中就可以通过使用"),a("code",[t._v("f")]),t._v("来调用"),a("code",[t._v("fmt")]),t._v("包中的函数了。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("如果引入一个包的时候为其设置了一个特殊"),a("code",[t._v("_")]),t._v("作为包名，那么这个包的引入方式就称为匿名引入。一个包被匿名引入的目的主要是为了加载这个包，从而使得这个包中的资源得以初始化。 被匿名引入的包中的"),a("code",[t._v("init")]),t._v("函数将被执行并且仅执行一遍。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"github.com/go-sql-driver/mysql"')]),t._v("\n")])])]),a("p",[t._v("匿名引入的包与其他方式导入的包一样都会被编译到可执行文件中。")]),t._v(" "),a("p",[t._v("需要注意的是，Go语言中不允许引入包却不在代码中使用这个包的内容，如果引入了未使用的包则会触发编译错误。")]),t._v(" "),a("h3",{attrs:{id:"_2、init初始化函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、init初始化函数"}},[t._v("#")]),t._v(" 2、init初始化函数")]),t._v(" "),a("p",[t._v("在每一个Go源文件中，都可以定义任意个如下格式的特殊函数：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这种特殊的函数不接收任何参数也没有任何返回值，我们也不能在代码中主动调用它。当程序启动的时候，init函数会按照它们声明的顺序自动执行。")]),t._v(" "),a("p",[t._v("一个包的初始化过程是按照代码中引入的顺序来进行的，所有在该包中声明的"),a("code",[t._v("init")]),t._v("函数都将被串行调用并且仅调用执行一次。每一个包初始化的时候都是先执行依赖的包中声明的"),a("code",[t._v("init")]),t._v("函数再执行当前包中声明的"),a("code",[t._v("init")]),t._v("函数。确保在程序的"),a("code",[t._v("main")]),t._v("函数开始执行时所有的依赖包都已初始化完成。")]),t._v(" "),a("p",[t._v("通过前面一系列的学习相信大家已经大体了解了 Go 程序的启动和加载过程，在执行 main 包的 mian 函数之前， Go 引导程序会先对整个程序的包进行初始化。整个执行的流程如下图所示。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ian-kevin.oss-cn-beijing.aliyuncs.com/img/image-20220424225508647.png",alt:"Go 包的初始化"}})]),t._v(" "),a("p",[t._v("Go语言包会从"),a("code",[t._v("main")]),t._v("包开始检查其导入的所有包，每个包中又可能导入了其他的包。Go编译器由此构建出一个树状的包引用关系，再根据引用顺序决定编译顺序，依次编译这些包的代码。")]),t._v(" "),a("p",[t._v("在运行时，被最后导入的包会最先初始化并调用其"),a("code",[t._v("init()")]),t._v("函数， 如下图示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ian-kevin.oss-cn-beijing.aliyuncs.com/img/init02.png",alt:"包之间的init()执行顺序"}})]),t._v(" "),a("p",[t._v("每一个包的初始化是先从初始化包级别变量开始的。例如从下面的示例中我们就可以看出包级别变量的初始化会先于"),a("code",[t._v("init")]),t._v("初始化函数。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int8")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" pi "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pi:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHi")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHi")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"你好，世界！"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("输出结果：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("x: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\npi: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14")]),t._v("\nHello World"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n你好，世界！\n")])])]),a("p",[t._v("在上面的代码中，我们了解了Go语言中包的定义及包的初始化过程，这让我们能够在开发时按照自己的需要定义包。同时我们还学到了如何在我们的代码中引入其它的包，不过在本小节的所有示例中我们都是引入Go内置的包。现代编程语言大多都允许开发者对外发布包/库，也支持开发者在自己的代码中引入第三方库。这样的设计能够让广大开发者一起参与到语言的生态环境建设当中，把生态建设的更加完善。")]),t._v(" "),a("p",[t._v("Go 语言包的初始化有如下特点：")]),t._v(" "),a("ul",[a("li",[t._v("包初始化程序从 main 函数引用的包开始，逐级查找包的引用，直到找到没有引用其他包的包，最终生成一个包引用的有向无环图。")]),t._v(" "),a("li",[t._v("Go 编译器会将有向无环图转换为一棵树，然后从树的叶子节点开始逐层向上对包进行初始化。")]),t._v(" "),a("li",[t._v("单个包的初始化过程如上图所示，先初始化常量，然后是全局变量，最后执行包的 init 函数。")])]),t._v(" "),a("h2",{attrs:{id:"五、常用内置包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、常用内置包"}},[t._v("#")]),t._v(" 五、常用内置包")]),t._v(" "),a("p",[t._v("标准的 Go 语言代码库中包含了大量的包，并且在安装 Go 的时候多数会自动安装到系统中。我们可以在 $GOROOT/src/pkg 目录中查看这些包。下面简单介绍一些我们开发中常用的包。")]),t._v(" "),a("h3",{attrs:{id:"_1、fmt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、fmt"}},[t._v("#")]),t._v(" 1、fmt")]),t._v(" "),a("p",[t._v("fmt 包实现了格式化的标准输入输出，这与 C 语言中的 printf 和 scanf 类似。其中的 fmt.Printf() 和 fmt.Println() 是开发者使用最为频繁的函数。")]),t._v(" "),a("p",[t._v("格式化短语派生于 C 语言，一些短语（%- 序列）是这样使用：")]),t._v(" "),a("ul",[a("li",[t._v("%v：默认格式的值。当打印结构时，加号（%+v）会增加字段名；")]),t._v(" "),a("li",[t._v("%#v：Go 样式的值表达；")]),t._v(" "),a("li",[t._v("%T：带有类型的 Go 样式的值表达。")])]),t._v(" "),a("h3",{attrs:{id:"_2、io"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、io"}},[t._v("#")]),t._v(" 2、io")]),t._v(" "),a("p",[t._v("这个包提供了原始的 I/O 操作界面。它主要的任务是对 os 包这样的原始的 I/O 进行封装，增加一些其他相关，使其具有抽象功能用在公共的接口上。")]),t._v(" "),a("h3",{attrs:{id:"_3、bufio"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、bufio"}},[t._v("#")]),t._v(" 3、bufio")]),t._v(" "),a("p",[t._v("bufio 包通过对 io 包的封装，提供了数据缓冲功能，能够一定程度减少大块数据读写带来的开销。")]),t._v(" "),a("p",[t._v("在 bufio 各个组件内部都维护了一个缓冲区，数据读写操作都直接通过缓存区进行。当发起一次读写操作时，会首先尝试从缓冲区获取数据，只有当缓冲区没有数据时，才会从数据源获取数据更新缓冲。")]),t._v(" "),a("h3",{attrs:{id:"_4、sort"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、sort"}},[t._v("#")]),t._v(" 4、sort")]),t._v(" "),a("p",[t._v("sort 包提供了用于对切片和用户定义的集合进行排序的功能。")]),t._v(" "),a("h3",{attrs:{id:"_5、strconv"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、strconv"}},[t._v("#")]),t._v(" 5、strconv")]),t._v(" "),a("p",[t._v("strconv 包提供了将字符串转换成基本数据类型，或者从基本数据类型转换为字符串的功能。")]),t._v(" "),a("h3",{attrs:{id:"_6、os"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、os"}},[t._v("#")]),t._v(" 6、os")]),t._v(" "),a("p",[t._v("os 包提供了不依赖平台的操作系统函数接口，设计像 Unix 风格，但错误处理是 go 风格，当 os 包使用时，如果失败后返回错误类型而不是错误数量。")]),t._v(" "),a("h3",{attrs:{id:"_7、sync"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7、sync"}},[t._v("#")]),t._v(" 7、sync")]),t._v(" "),a("p",[t._v("sync 包实现多线程中锁机制以及其他同步互斥机制。")]),t._v(" "),a("h3",{attrs:{id:"_8、flag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8、flag"}},[t._v("#")]),t._v(" 8、flag")]),t._v(" "),a("p",[t._v("flag 包提供命令行参数的规则定义和传入参数解析的功能。绝大部分的命令行程序都需要用到这个包。")]),t._v(" "),a("h3",{attrs:{id:"_9、encoding-json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9、encoding-json"}},[t._v("#")]),t._v(" 9、encoding/json")]),t._v(" "),a("p",[t._v("JSON 目前广泛用做网络程序中的通信格式。encoding/json 包提供了对 JSON 的基本支持，比如从一个对象序列化为 JSON 字符串，或者从 JSON 字符串反序列化出一个具体的对象等。")]),t._v(" "),a("h3",{attrs:{id:"_10、html-template"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10、html-template"}},[t._v("#")]),t._v(" 10、html/template")]),t._v(" "),a("p",[t._v("主要实现了 web 开发中生成 html 的 template 的一些函数。")]),t._v(" "),a("h3",{attrs:{id:"_11、net-http"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11、net-http"}},[t._v("#")]),t._v(" 11、net/http")]),t._v(" "),a("p",[t._v("net/http 包提供 HTTP 相关服务，主要包括 http 请求、响应和 URL 的解析，以及基本的 http 客户端和扩展的 http 服务。")]),t._v(" "),a("p",[t._v("通过 net/http 包，只需要数行代码，即可实现一个爬虫或者一个 Web 服务器，这在传统语言中是无法想象的。")]),t._v(" "),a("h3",{attrs:{id:"_12、reflect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12、reflect"}},[t._v("#")]),t._v(" 12、reflect")]),t._v(" "),a("p",[t._v("reflect 包实现了运行时反射，允许程序通过抽象类型操作对象。通常用于处理静态类型 interface{} 的值，并且通过 Typeof 解析出其动态类型信息，通常会返回一个有接口类型 Type 的对象。")]),t._v(" "),a("h3",{attrs:{id:"_13、os-exec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13、os-exec"}},[t._v("#")]),t._v(" 13、os/exec")]),t._v(" "),a("p",[t._v("os/exec 包提供了执行自定义 linux 命令的相关实现。")]),t._v(" "),a("h3",{attrs:{id:"_14、strings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14、strings"}},[t._v("#")]),t._v(" 14、strings")]),t._v(" "),a("p",[t._v("strings 包主要是处理字符串的一些函数集合，包括合并、查找、分割、比较、后缀检查、索引、大小写处理等等。")]),t._v(" "),a("p",[t._v("strings 包与 bytes 包的函数接口功能基本一致。")]),t._v(" "),a("h3",{attrs:{id:"_15、bytes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15、bytes"}},[t._v("#")]),t._v(" 15、bytes")]),t._v(" "),a("p",[t._v("bytes 包提供了对字节切片进行读写操作的一系列函数。字节切片处理的函数比较多，分为基本处理函数、比较函数、后缀检查函数、索引函数、分割函数、大小写处理函数和子切片处理函数等。")]),t._v(" "),a("h3",{attrs:{id:"_16、log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16、log"}},[t._v("#")]),t._v(" 16、log")]),t._v(" "),a("p",[t._v("log 包主要用于在程序中输出日志。")]),t._v(" "),a("p",[t._v("log 包中提供了三类日志输出接口，Print、Fatal 和 Panic。")]),t._v(" "),a("ul",[a("li",[t._v("Print 是普通输出；")]),t._v(" "),a("li",[t._v("Fatal 是在执行完 Print 后，执行 os.Exit(1)；")]),t._v(" "),a("li",[t._v("Panic 是在执行完 Print 后调用 panic() 方法。")])]),t._v(" "),a("h2",{attrs:{id:"六、自定义包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、自定义包"}},[t._v("#")]),t._v(" 六、自定义包")]),t._v(" "),a("p",[t._v("包是 Go 语言中代码组成和代码编译的主要方式，是多个 Go 源码的集合，是一种高级的代码复用方案，像 fmt、os、io 等这样具有常用功能的内置包在 Go 语言中有 150 个以上，它们被称为标准库，大部分（一些底层的除外）内置于 Go 本身。")]),t._v(" "),a("p",[t._v("包要求在同一个目录下的所有文件的第一行添加如下代码，以标记该文件归属的包：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" 包名\n")])])]),a("p",[t._v("包的特性如下：")]),t._v(" "),a("ul",[a("li",[t._v("一个目录下的同级文件归属一个包。")]),t._v(" "),a("li",[t._v("包名可以与其目录不同名。")]),t._v(" "),a("li",[t._v("包名为 main 的包为应用程序的入口包，编译源码没有 main 包时，将无法编译输出可执行的文件。")])]),t._v(" "),a("p",[t._v("任何包系统设计的目的都是为了简化大型程序的设计和维护工作，通过将一组相关的特性放进一个独立的单元以便于理解和更新，在每个单元更新的同时保持和程序中其它单元的相对独立性。这种模块化的特性允许每个包可以被其它的不同项目共享和重用，在项目范围内、甚至全球范围统一的分发和复用。")]),t._v(" "),a("p",[t._v("每个包一般都定义了一个不同的名字空间用于它内部的每个标识符的访问。每个名字空间关联到一个特定的包，让我们给类型、函数等选择简短明了的名字，这样可以避免在我们使用它们的时候减少和其它部分名字的冲突。")]),t._v(" "),a("p",[t._v("每个包还通过控制包内名字的可见性和是否导出来实现封装特性。通过限制包成员的可见性并隐藏包 API 的具体实现，将允许包的维护者在不影响外部包用户的前提下调整包的内部实现。通过限制包内变量的可见性，还可以强制用户通过某些特定函数来访问和更新内部变量，这样可以保证内部变量的一致性和并发时的互斥约束。")]),t._v(" "),a("p",[t._v("当我们修改了一个源文件，我们必须重新编译该源文件对应的包和所有依赖该包的其他包。即使是从头构建，Go 语言编译器的编译速度也明显快于其它编译语言。Go 语言的闪电般的编译速度主要得益于三个语言特性。")]),t._v(" "),a("ul",[a("li",[t._v("第一点，所有导入的包必须在每个文件的开头显式声明，这样的话编译器就没有必要读取和分析整个源文件来判断包的依赖关系。")]),t._v(" "),a("li",[t._v("第二点，禁止包的环状依赖，因为没有循环依赖，包的依赖关系形成一个有向无环图，每个包可以被独立编译，而且很可能是被并发编译。")]),t._v(" "),a("li",[t._v("第三点，编译后包的目标文件不仅仅记录包本身的导出信息，目标文件同时还记录了包的依赖关系。因此，在编译一个包的时候，编译器只需要读取每个直接导入包的目标文件，而不需要遍历所有依赖的的文件。")])]),t._v(" "),a("h3",{attrs:{id:"自定义一个包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义一个包"}},[t._v("#")]),t._v(" 自定义一个包")]),t._v(" "),a("p",[t._v("到目前为止，我们所使用的例子都是以一个包的形式存在的，比如 main 包。在 Go 语言里，允许我们将同一个包的代码分隔成多个独立的源码文件来单独保存，只需要将这些文件放在同一个目录下即可。")]),t._v(" "),a("p",[t._v("我们创建的自定义的包需要将其放在 GOPATH 的 src 目录下（也可以是 src 目录下的某个子目录），而且两个不同的包不能放在同一目录下，这样会引起编译错误。")]),t._v(" "),a("p",[t._v("一个包中可以有任意多个文件，文件的名字也没有任何规定（但后缀必须是 .go），这里我们假设包名就是 .go 的文件名（如果一个包有多个 .go 文件，则其中会有一个 .go 文件的文件名和包名相同）。")]),t._v(" "),a("p",[t._v("下面通过示例来演示一下如何创建一个名为 demo 的自定义包，并在 main 包中使用自定义包 demo 中的方法。")]),t._v(" "),a("p",[t._v("首先，在 GOPATH 下的 src 目录中新建一个 demo 文件夹 ，并在 demo 文件夹下创建 demo.go 文件：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// demo.go")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" demo\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PrintStr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("然后，在 GOPATH 下的 src 目录中新建一个 main 文件夹，并在 main 文件夹下创建 mian.go 文件：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"demo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PrintStr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello world")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("对引用自定义包需要注意以下几点：")]),t._v(" "),a("ul",[a("li",[t._v("如果项目的目录不在 GOPATH 环境变量中，则需要把项目移到 GOPATH 所在的目录中，或者将项目所在的目录设置到 GOPATH 环境变量中，否则无法完成编译；")]),t._v(" "),a("li",[t._v("使用 import 语句导入包时，使用的是包所属文件夹的名称；")]),t._v(" "),a("li",[t._v("包中的函数名第一个字母要大写，否则无法在外部调用；")]),t._v(" "),a("li",[t._v("自定义包的包名不必与其所在文件夹的名称保持一致，但为了便于维护，建议保持一致；")]),t._v(" "),a("li",[t._v("调用自定义包时使用 "),a("code",[t._v("包名 . 函数名")]),t._v(" 的方式，如上例：demo.PrintStr()。")])]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://c.biancheng.net/view/5394.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("包的基本概念"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://c.biancheng.net/view/4306.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go 语言常用内置包"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);
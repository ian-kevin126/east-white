(window.webpackJsonp=window.webpackJsonp||[]).push([[186],{795:function(a,s,e){"use strict";e.r(s);var t=e(6),n=Object(t.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"docker镜像构建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker镜像构建"}},[a._v("#")]),a._v(" Docker镜像构建")]),a._v(" "),e("h2",{attrs:{id:"_1-docker-commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-docker-commit"}},[a._v("#")]),a._v(" 1. docker commit")]),a._v(" "),e("p",[a._v("平常我们都是从公共仓库拉取镜像，我们也可以从容器中构建我们自己的镜像。")]),a._v(" "),e("p",[a._v("需求：")]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.")]),a._v(" 基础镜像centos\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2.")]),a._v(" 安装jdk\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3.")]),a._v(" 安装nginx\n")])])]),e("h3",{attrs:{id:"_1-1-创建容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-创建容器"}},[a._v("#")]),a._v(" 1.1 创建容器")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 拉取镜像")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" pull centos:7\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 创建容器")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run -di --name centos7 centos:7\n")])])]),e("h3",{attrs:{id:"_1-2-安装jdk和nginx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-安装jdk和nginx"}},[a._v("#")]),a._v(" 1.2 安装jdk和nginx")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#进入容器")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" -it centos7 /bin/bash\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 安装jdk")]),a._v("\nyum -y "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" java-1.8.0-openjdk.x86_64\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 安装nginx")]),a._v("\nyum -y "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" epel-release\nyum "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" -y nginx\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 安装vim")]),a._v("\nyum -y "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("vim")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 启动nginx")]),a._v("\n/usr/sbin/nginx\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 访问nginx")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("curl")]),a._v(" http://localhost\n")])])]),e("h3",{attrs:{id:"_1-3-构建镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-构建镜像"}},[a._v("#")]),a._v(" 1.3 构建镜像")]),a._v(" "),e("p",[a._v("接下来，我们将我们做好的容器，构建为一个新的镜像")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" commit "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" CONTAINER "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("REPOSITORY"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(":TAG"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" commit -a"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"mszlu"')]),a._v(" -m"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"jdk8 and nginx"')]),a._v(" centos7 mycentos:7\n")])])]),e("ul",[e("li",[e("code",[a._v("-a")]),a._v("：提交的镜像作者；")]),a._v(" "),e("li",[e("code",[a._v("-c")]),a._v("：使用 Dockerfile 指令来创建镜像；")]),a._v(" "),e("li",[e("code",[a._v("-m")]),a._v("：提交时的说明文字；")]),a._v(" "),e("li",[e("code",[a._v("-p")]),a._v("：在 commit 时，将容器暂停。")])]),a._v(" "),e("p",[e("img",{attrs:{src:"https://ian-kevin.oss-cn-beijing.aliyuncs.com/img/image-20220313121529572.png",alt:"image-20220313121529572"}})]),a._v(" "),e("p",[a._v("我们可以发现我们构建的镜像比较大，因为里面有jdk和nginx")]),a._v(" "),e("h3",{attrs:{id:"_1-4-使用新镜像构建容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-使用新镜像构建容器"}},[a._v("#")]),a._v(" 1.4 使用新镜像构建容器")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run -di --name mycentos7 -p "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v(":80 mycentos:7\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#进入容器 启动nginx")]),a._v("\n/usr/sbin/nginx\n")])])]),e("p",[a._v("访问：")]),a._v(" "),e("p",[a._v("http://ip/index.html")]),a._v(" "),e("h2",{attrs:{id:"_2-dockerfile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-dockerfile"}},[a._v("#")]),a._v(" 2. Dockerfile")]),a._v(" "),e("p",[a._v("在 Docker 中构建镜像最常用的方式，就是使用 "),e("code",[a._v("Dockerfile")]),a._v("。Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。官方文档：https://docs.docker.com/engine/reference/builder/")]),a._v(" "),e("h3",{attrs:{id:"_2-1-常用指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-常用指令"}},[a._v("#")]),a._v(" 2.1 常用指令")]),a._v(" "),e("p",[e("strong",[a._v("FROM")])]),a._v(" "),e("p",[a._v("语法："),e("code",[a._v("FROM <image>:<tag>")])]),a._v(" "),e("p",[a._v("指明构建的新镜像是来自于哪个基础镜像，如果没有选择 tag，那么默认值为 latest。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("FROM centos:7\n")])])]),e("blockquote",[e("p",[a._v("如果不以任何镜像为基础，那么写法为：FROM scratch。官方说明：scratch 镜像是一个空镜像，可以用于构建 busybox 等超小镜像，可以说是真正的从零开始构建属于自己的镜像。")])]),a._v(" "),e("p",[e("strong",[a._v("MAINTAINER")])]),a._v(" "),e("p",[a._v("语法："),e("code",[a._v("MAINTAINER <name>")])]),a._v(" "),e("p",[a._v("指明镜像维护者及其联系方式（一般是邮箱地址）。官方说明已过时，推荐使用 LABEL。")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[a._v("MAINTAINER mszlu "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("mszlu@mszlu.com"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),e("p",[a._v("**LABEL **")]),a._v(" "),e("p",[a._v("语法："),e("code",[a._v("LABEL <key>=<value> <key>=<value> <key>=<value> ...")])]),a._v(" "),e("p",[a._v("功能是为镜像指定标签。也可以使用 LABEL 来指定镜像作者。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('LABEL maintainer="mszlu.com"\n')])])]),e("p",[e("strong",[a._v("RUN")])]),a._v(" "),e("p",[a._v("语法："),e("code",[a._v("RUN <command>")])]),a._v(" "),e("p",[a._v("构建镜像时运行的 Shell 命令，比如构建的新镜像中我们想在 /usr/local 目录下创建一个 java 目录。")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[a._v("RUN "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" -p /usr/local/java\n")])])]),e("p",[e("strong",[a._v("ADD")])]),a._v(" "),e("p",[a._v("语法："),e("code",[a._v("ADD <src>... <dest>")])]),a._v(" "),e("p",[a._v("拷贝文件或目录到镜像中。src 可以是一个本地文件或者是一个本地压缩文件，压缩文件会自动解压。还可以是一个 url，如果把 src 写成一个 url，那么 ADD 就类似于 wget 命令，然后自动下载和解压。")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[a._v("ADD jdk-11.0.6_linux-x64_bin.tar.gz /usr/local/java\n")])])]),e("p",[a._v("**COPY **")]),a._v(" "),e("p",[a._v("语法："),e("code",[a._v("COPY <src>... <dest>")])]),a._v(" "),e("p",[a._v("拷贝文件或目录到镜像中。用法同 ADD，只是不支持自动下载和解压。")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[a._v("COPY jdk-11.0.6_linux-x64_bin.tar.gz /usr/local/java\n")])])]),e("p",[e("strong",[a._v("EXPOSE")])]),a._v(" "),e("p",[a._v("语法："),e("code",[a._v("EXPOSE <port> [<port>/<protocol>...]")])]),a._v(" "),e("p",[a._v("暴露容器运行时的监听端口给外部，可以指定端口是监听 TCP 还是 UDP，如果未指定协议，则默认为 TCP。")]),a._v(" "),e("div",{staticClass:"language-she extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("EXPOSE 80 443 8080/tcp\n")])])]),e("p",[a._v("如果想使得容器与宿主机的端口有映射关系，必须在容器启动的时候加上 -p 参数。")]),a._v(" "),e("p",[e("strong",[a._v("ENV")])]),a._v(" "),e("p",[a._v("语法："),e("code",[a._v("ENV <key> <value>")]),a._v(" 添加单个，"),e("code",[a._v("ENV <key>=<value> ...")]),a._v(" 添加多个。")]),a._v(" "),e("p",[a._v("设置容器内环境变量。")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[a._v("ENV JAVA_HOME /usr/local/java/jdk-11.0.6/\n")])])]),e("p",[e("strong",[a._v("CMD")])]),a._v(" "),e("p",[a._v("语法：")]),a._v(" "),e("ul",[e("li",[e("code",[a._v('CMD ["executable","param1","param2"]')]),a._v("，比如："),e("code",[a._v('CMD ["/usr/local/tomcat/bin/catalina.sh", "start"]')])]),a._v(" "),e("li",[e("code",[a._v('CMD ["param1","param2"]')]),a._v("，比如："),e("code",[a._v('CMD [ "echo", "$JAVA_HOME" ]')])]),a._v(" "),e("li",[e("code",[a._v("CMD command param1 param2")]),a._v("，比如："),e("code",[a._v("CMD echo $JAVA_HOME")])])]),a._v(" "),e("p",[a._v("启动容器时执行的 Shell 命令。在 Dockerfile 中只能有一条 CMD 指令。如果设置了多条 CMD，只有最后一条 CMD 会生效。")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[a._v("CMD ehco "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$JAVA_HOME")]),a._v("\n")])])]),e("blockquote",[e("p",[a._v("如果创建容器的时候指定了命令，则 CMD 命令会被替代。假如镜像叫 "),e("code",[a._v("centos:7")]),a._v("，创建容器时命令是："),e("code",[a._v('docker run -it --name centos7 centos:7 echo "helloworld"')]),a._v(" 或者 "),e("code",[a._v("docker run -it --name centos7 centos:7 /bin/bash")]),a._v("，就不会输出 "),e("code",[a._v("$JAVA_HOME")]),a._v(" 的环境变量信息了，因为 CMD 命令被 "),e("code",[a._v('echo "helloworld"')]),a._v("、"),e("code",[a._v("/bin/bash")]),a._v(" 覆盖了。")])]),a._v(" "),e("p",[a._v("**ENTRYPOINT **")]),a._v(" "),e("p",[a._v("语法：")]),a._v(" "),e("ul",[e("li",[e("code",[a._v('ENTRYPOINT ["executable", "param1", "param2"]')]),a._v("，比如："),e("code",[a._v('ENTRYPOINT ["/usr/local/tomcat/bin/catalina.sh", "start"]')])]),a._v(" "),e("li",[e("code",[a._v("ENTRYPOINT command param1 param2")]),a._v("，比如："),e("code",[a._v("ENTRYPOINT ehco $JAVA_HOME")])])]),a._v(" "),e("p",[a._v("启动容器时执行的 Shell 命令，同 CMD 类似，不会被 docker run 命令行指定的参数所覆盖。在 Dockerfile 中只能有一条 ENTRYPOINT 指令。如果设置了多条 ENTRYPOINT，只有最后一条 ENTRYPOINT 会生效。")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[a._v("ENTRYPOINT ehco "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$JAVA_HOME")]),a._v("\n")])])]),e("blockquote",[e("ul",[e("li",[a._v("如果在 Dockerfile 中同时写了 ENTRYPOINT 和 CMD，并且 CMD 指令不是一个完整的可执行命令，那么 CMD 指定的内容将会作为 ENTRYPOINT 的参数；")]),a._v(" "),e("li",[a._v("如果在 Dockerfile 中同时写了 ENTRYPOINT 和 CMD，并且 CMD 是一个完整的指令，那么它们两个会互相覆盖，谁在最后谁生效")])])]),a._v(" "),e("p",[a._v("**WORKDIR **")]),a._v(" "),e("p",[a._v("语法："),e("code",[a._v("WORKDIR /path/to/workdir")])]),a._v(" "),e("p",[a._v("为 RUN、CMD、ENTRYPOINT 以及 COPY 和 AND 设置工作目录。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("WORKDIR /usr/local\n")])])]),e("p",[a._v("指定容器挂载点到宿主机自动生成的目录或其他容器。一般的使用场景为需要持久化存储数据时。")]),a._v(" "),e("p",[e("strong",[a._v("VOLUME")])]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 容器的 /var/lib/mysql 目录会在运行时自动挂载为匿名卷，匿名卷在宿主机的 /var/lib/docker/volumes 目录下")]),a._v("\nVOLUME "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/var/lib/mysql"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),e("blockquote",[e("p",[a._v("一般不会在 Dockerfile 中用到，更常见的还是在 docker run 的时候通过 -v 指定数据卷。")])]),a._v(" "),e("h3",{attrs:{id:"_2-2-构建镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-构建镜像"}},[a._v("#")]),a._v(" 2.2 构建镜像")]),a._v(" "),e("p",[a._v("Dockerfile 文件编写好以后，真正构建镜像时需要通过 "),e("code",[a._v("docker build")]),a._v(" 命令。")]),a._v(" "),e("p",[e("code",[a._v("docker build")]),a._v(" 命令用于使用 "),e("code",[a._v("Dockerfile")]),a._v(" 创建镜像。")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用当前目录的 Dockerfile 创建镜像")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" build -t mycentos:7 "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 通过 -f Dockerfile 文件的位置创建镜像")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" build -f /usr/local/dockerfile/Dockerfile -t mycentos:7 "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n")])])]),e("ul",[e("li",[e("code",[a._v("-f")]),a._v("：指定要使用的 Dockerfile 路径；")]),a._v(" "),e("li",[e("code",[a._v("--tag, -t")]),a._v("：镜像的名字及标签，可以在一次构建中为一个镜像设置多个标签。")])]),a._v(" "),e("p",[e("strong",[a._v("关于最后面.的理解")])]),a._v(" "),e("p",[a._v("我们在使用 "),e("code",[a._v("docker build")]),a._v(" 命令去构建镜像时，往往会看到命令最后会有一个 "),e("code",[a._v(".")]),a._v(" 号。它究竟是什么意思呢？")]),a._v(" "),e("p",[a._v("很多人以为是用来指定 "),e("code",[a._v("Dockerfile")]),a._v(" 文件所在的位置的，但其实 "),e("code",[a._v("-f")]),a._v(" 参数才是用来指定 "),e("code",[a._v("Dockerfile")]),a._v(" 的路径的，那么 "),e("code",[a._v(".")]),a._v(" 号究竟是用来做什么的呢？")]),a._v(" "),e("p",[e("code",[a._v("Docker")]),a._v(" 在运行时分为 "),e("code",[a._v("Docker 引擎（服务端守护进程）")]),a._v(" 和 "),e("code",[a._v("客户端工具")]),a._v("，我们日常使用各种 "),e("code",[a._v("docker 命令")]),a._v("，其实就是在使用 "),e("code",[a._v("客户端工具")]),a._v(" 与 "),e("code",[a._v("Docker 引擎")]),a._v(" 进行交互。")]),a._v(" "),e("p",[a._v("当我们使用 "),e("code",[a._v("docker build")]),a._v(" 命令来构建镜像时，这个构建过程其实是在 "),e("code",[a._v("Docker 引擎")]),a._v(" 中完成的，而不是在本机环境。如果在 "),e("code",[a._v("Dockerfile")]),a._v(" 中使用了一些 "),e("code",[a._v("ADD")]),a._v(" 等指令来操作文件，如何让 "),e("code",[a._v("Docker 引擎")]),a._v(" 获取到这些文件呢？")]),a._v(" "),e("p",[a._v("这里就有了一个 "),e("code",[a._v("镜像构建上下文")]),a._v(" 的概念，当构建的时候，由用户指定构建镜像时的上下文路径，而 "),e("code",[a._v("docker build")]),a._v(" 会将这个路径下所有的文件都打包上传给 "),e("code",[a._v("Docker 引擎")]),a._v("，引擎内将这些内容展开后，就能获取到上下文中的文件了。")]),a._v(" "),e("p",[a._v("举个例子：我的宿主机 jdk 文件在 /root 目录下，Dockerfile 文件在 /usr/local/dockerfile 目录下，文件内容如下：")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[a._v("ADD jdk-11.0.6_linux-x64_bin.tar.gz /usr/local/java\n")])])]),e("p",[a._v("那么构建镜像时的命令就该这样写：")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" build -f /usr/local/dockerfile/Dockerfile -t mycentos:7 /root\n")])])]),e("p",[a._v("再举个例子：我的宿主机 jdk 文件和 Dockerfile 文件都在 /usr/local/dockerfile 目录下，文件内容如下：")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[a._v("ADD jdk-11.0.6_linux-x64_bin.tar.gz /usr/local/java\n")])])]),e("p",[a._v("那么构建镜像时的命令则这样写：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker build -f /usr/local/dockerfile/Dockerfile -t mycentos:7 .\n")])])]),e("h3",{attrs:{id:"_2-3-实例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-实例"}},[a._v("#")]),a._v(" 2.3 实例")]),a._v(" "),e("p",[a._v("接下来我们通过基础镜像 "),e("code",[a._v("centos:7")]),a._v("，在该镜像中安装 jdk 和 tomcat 以后将其制作为一个新的镜像 "),e("code",[a._v("mscentos:7")])]),a._v(" "),e("p",[a._v("创建目录")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" -p /mnt/docker/dockerfile\n")])])]),e("p",[a._v("编写 Dockerfile 文件。")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("vim")]),a._v(" Dockerfile\n")])])]),e("p",[a._v("Dockerfile 文件内容如下：")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 指明构建的新镜像是来自于 centos:7 基础镜像")]),a._v("\nFROM centos:7\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 通过镜像标签声明了作者信息")]),a._v("\nLABEL "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("maintainer")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"mszlu.com"')]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 设置工作目录")]),a._v("\nWORKDIR /usr/local\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 新镜像构建成功以后创建指定目录")]),a._v("\nRUN "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" -p /usr/local/java "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" -p /usr/local/tomcat\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 拷贝文件到镜像中并解压")]),a._v("\nADD jdk-11.0.8_linux-x64_bin.tar.gz /usr/local/java\nADD apache-tomcat-9.0.59.tar.gz /usr/local/tomcat\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 暴露容器运行时的 8080 监听端口给外部")]),a._v("\nEXPOSE "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("8080")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 设置容器内 JAVA_HOME 环境变量")]),a._v("\nENV JAVA_HOME /usr/local/java/jdk-11.0.8/\nENV "),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("PATH")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$PATH")]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$JAVA_HOME")]),a._v("/bin\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 启动容器时启动 tomcat")]),a._v("\nCMD "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/usr/local/tomcat/apache-tomcat-9.0.59/bin/catalina.sh"')]),a._v(", "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"run"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),e("p",[a._v("上传jdk和tomcat到Dockerfile一样的目录下")]),a._v(" "),e("p",[a._v("构建镜像")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("root@localhost ~"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# docker build -f /usr/local/dockerfile/Dockerfile -t mscentos:7 .")]),a._v("\n")])])]),e("p",[e("strong",[a._v("使用构建的镜像创建容器")])]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 创建容器")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run -di --name mscentos7 -p "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("8080")]),a._v(":8080 mscentos:7\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 访问 http://192.168.200.101:8080/ 看到页面说明环境 OK!")]),a._v("\n\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);